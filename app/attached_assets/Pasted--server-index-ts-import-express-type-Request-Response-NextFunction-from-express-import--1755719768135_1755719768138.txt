// server/index.ts
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";

const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Lightweight request logging for /api routes
app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined;

  const originalResJson = res.json.bind(res);
  res.json = (bodyJson: any, ...args: any[]) => {
    capturedJsonResponse = bodyJson;
    return originalResJson(bodyJson, ...args);
  };

  res.on("finish", () => {
    if (path.startsWith("/api")) {
      const duration = Date.now() - start;
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      if (logLine.length > 80) logLine = logLine.slice(0, 79) + "â€¦";
      log(logLine);
    }
  });

  next();
});

async function createApp() {
  // Your API/app routes
  const server = await registerRoutes(app);

  // Centralized error handler
  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    // Re-throw so Vercel logs the error
    throw err;
  });

  // Vite in dev; static (built) assets in prod
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app); // must serve dist/ and fallback to index.html inside this
  }

  return { app, server };
}

// Cache the Express app across invocations (serverless warm instances)
let cachedApp: express.Express | null = null;
async function getApp() {
  if (!cachedApp) {
    const { app } = await createApp();
    cachedApp = app;
  }
  return cachedApp;
}

// Vercel entrypoint
export default async function handler(req: any, res: any) {
  const app = await getApp();
  return app(req, res);
}

// Local dev server (not used on Vercel)
if (!process.env.VERCEL) {
  (async () => {
    const { server } = await createApp();
    const port = parseInt(process.env.PORT || "5000", 10);
    server.listen(
      { port, host: "0.0.0.0", reusePort: true },
      () => log(`serving on port ${port}`)
    );
  })();
}
